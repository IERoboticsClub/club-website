---
import SplitFlapString from '../components/SplitFlapString.astro';
// this is a split-flap animation for a calendar
import ical from 'node-ical';
let URL = import.meta.env.ICAL || "https://ieconnects.ie.edu/ical/ical_club_300003041.ics"
const webEvents = await ical.async.fromURL(URL);
let events = Object.values(webEvents).map((event) => {
    return {
        title: event.summary?.val,
        // date in dd mm yyyy format
        start: new Date(event.start),
        url: event.url,
        description: event.description
    };
})
events = events.sort((a, b) => {
    return a.start - b.start;
}).filter((event) => {
    return event.start > new Date()
});
// filter null properties
events = events.filter((event) => {
    return event.title && event.start && event.url;
});
// format the date to be dd mm yyyy
events = events.map((event) => {
    let date = event.start;
    let day = date.getDate();
    let month = date.getMonth() + 1;
    let year = date.getFullYear();
    return {
        ...event,
        start: `${day}/${month}/${year}`
    }
})
---
<h1>Upcoming Events</h1>
<table>
<thead>
    <tr>
        <th>Title</th>
        <th>Start</th>
        <th>URL</th>
    </tr>
</thead>
<tbody>
{events.map((event) => (
  <tr>
    <td class="text-lg">
        <a href={event.url}>
        <SplitFlapString text={event.title}/>
        </a>
    </td>
    <td class="text-lg"><SplitFlapString text={event.start}/></td>
</tr>
))}
</tbody>
    </table>
    <script>

let elements = document.querySelectorAll(".dynamicString")
console.log(elements);

let flapGrid = [] // elements X characters X flaps
elements.forEach((element) => {
    let characters = element.querySelectorAll(".char");
    let characterGrid = [];
    characters.forEach((character) => {
        let flaps = character.querySelectorAll(".flap");
        characterGrid.push(flaps);
    });
    flapGrid.push(characterGrid);
});


const animateFlap = (flapElement) => {
    // Set the initial state
    flapElement.style.display = "block";
    flapElement.style.transform = 'rotateX(0deg)';
    flapElement.style.transition = 'transform 0.6s ease-out';

    // Trigger the animation
    setTimeout(() => {
        flapElement.style.transform = 'rotateX(360deg)';
    }, 0);
}


async function characterFlip (listOfFlaps) {
    console.log(listOfFlaps);
    let flaps = listOfFlaps;
    for (let j = 0; j < flaps.length; j++) {
        const flap = flaps[j];
        console.log(flap.textContent);
        animateFlap(flap);
        await new Promise(resolve => setTimeout(resolve,(Math.random() * 150) + 50));
        flap.style.display = "none";
        flap.style.animationDelay = `${j * 0.1}s`;
    }

    // Show the correct flap after a delay
    setTimeout(() => {
        flaps[flaps.length - 1].style.display = "block";
        if (flaps[flaps.length - 1].textContent === " ") {
            flaps[flaps.length - 1].textContent = "\u00A0";
            // TODO maybe mode to split flap component
        }
    }, 100);
}

console.log(flapGrid);

let decoded = false;

const decodeFlaps = () => {
    for (let i = 0; i < flapGrid.length; i++) {
        for (let j = 0; j < flapGrid[i].length; j++) {
            setTimeout(() => {
                const flaps = flapGrid[i][j];
                console.log(flaps);
                characterFlip(flaps);
            }, (i * 0.1 + j * 0.1) * 1000);
        }
    }
    decoded = true;
}

// when user scrolls to the element, start the animation
document.addEventListener("scroll", () => {
    let element = document.querySelector("table");
    let rect = element.getBoundingClientRect();
    if (rect.top < window.innerHeight && rect.bottom > 0 && !decoded) {
        decodeFlaps();
    }
});


</script>
